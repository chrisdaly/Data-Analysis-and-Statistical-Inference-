data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
names(trainSA)
model <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA, method = "glm")
model$finalmodel
model$finalModel
model <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA, method = "glm", family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA, predict(model, newdata = testSA))
predict(model, newdata = testSA)
prediction <- predict(model, newdata = testSA)
prediction <- predict(model, newdata = testSA)
missClass(testSA, prediction)
model <- train(Area ~ ., data = olive, method = "rpart")
newdata = as.data.frame(t(colMeans(olive)))
predict(model, newdata = newdata)
m <- tree(Area ~ ., data = olive)
getModelInfo()
ls(getModelInfo(), pattern = "...")
getModelInfo(model = "...")
modelLookup(model = "...")
ls(getModelInfo(model = "...")
model <- train(Area ~ ., data = olive, method = "rf")
model <- train(Area ~ ., data = olive, method = "rf")
library(randomForest)
help(randomForest)
randomForest(Area ~ ., data = olive)
newdata = as.data.frame(t(colMeans(olive)))
a <- randomForest(Area ~ ., data = olive)
predict(a, newdata = newdata)
tree()
tree(a)
model <- tree()
install.packages("rpart2")
model <- train(Area ~ ., data = olive, method = "rpart2")
model
predict(model, newdata = newdata)
missClass(testSA, prediction)
missClass(testSA$chd, prediction)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
#Then set the seed to 13234 and fit a logistic regression model (method="glm",
# be sure to specify family="binomial") with Coronary Heart Disease (chd) as the
# outcome and age at onset, current alcohol consumption, obesity levels,
# cumulative tabacco, type-A behavior, and low density lipoprotein cholesterol
# as predictors. Calculate the misclassification rate for your model using this
# function and a prediction on the "response" scale:
model <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA, method = "glm", family = "binomial")
prediction <- predict(model, newdata = testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA$chd, prediction)
missClass(trainSA$chd, prediction)
missClass(trainSA$chd, predict(model, newdata = trainSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
y <- factor(vowel.train)
summary(vowel.train)
factor(vowel.train)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
model <- train(y ~ ., data = vowel.train, method = "rpart2)")
model <- train(y ~ ., data = vowel.train, method = "rpart2")
?train
?randomForest
?varImp
varImp(model)
model <- train(y ~ ., data = vowel.train, method = "rf")
varImp(model)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
# Fit a random forest predictor relating the factor variable y to the remaining variables.
model <- train(y ~ ., data = vowel.train, method = "rf")
randomForest(y ~ ., data = vowel.train)
varImp(model)
randomForest(y ~ ., data = vowel.train, importance = FALSE)
varImp(a)
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
varImp(a)
a <- randomForest(y ~ ., data = vowel.train)
varImp(a)
varImp(a, useMode = "rf")
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
varImp(a)
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
varImp(a)
set.seed(33833)
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
varImp(a)
set.seed(33833)
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
varImp(model)
order(b)
set.seed(33833)
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
b <- varImp(a)
order(b)
library(wc14goals)
library(httr)
myapp = oauth_app("twitter", key = "youConsumerKeyHere", secret = "secret")
GET("https://api.twitch.tv/kraken/?oauth_token=TOKEN")
GET('https://api.twitch.tv/kraken/streams/ukiyojp?client_id=7y7syvf1y5yvuv8iy93nes5cl175m2q')
a = GET('https://api.twitch.tv/kraken/streams/ukiyojp?client_id=7y7syvf1y5yvuv8iy93nes5cl175m2q')
a
names(a)
a.url
a$url
a$conten
a$times
a$config
a = GET('https://api.twitch.tv/kraken/streams/ukazxcp?client_id=7y7syvf1y5yvuv8iy93nes5cl175m2q')
a.content
a$content
GET("https://api.twitch.tv/kraken/channels/cosmowright/follows/?limit=100")
x <- GET("https://api.twitch.tv/kraken/channels/cosmowright/follows/?limit=100")
x$content
?toJSON
library(JSON)
library(JSON2)
library(jsonlite)
fromJSON(x)
x
fromJSON(a)
a
x
fromJSON(x$content)
x$content
gc()
library(MASS)
data(shuttle)
# convert outcome to 0 = noauto, 1 = auto
shuttle$use <- factor(shuttle$use, levels = c("auto", "noauto"), labels = c(1, 0))
Question 2
# Consider the previous problem. Give the estimated odds ratio for autoloader
# use comparing head winds (numerator) to tail winds (denominator) adjusting for
# wind strength from the variable magn.
fit2 <- glm(use ~ wind + magn - 1, data = shuttle, family = "binomial")
summary(fit)
windhead2 <- fit2$coef[1]
windtail2 <- fit2$coef[2]
exp(windhead2)/exp(windtail2)
fit2
summary(fit2)
exp(fit2$coef[1])/exp(fit2coef[2])
exp(fit2$coef[1])/exp(fit2c$oef[2])
exp(fit2$coef[1])/exp(fit2$coef[2])
exp(windhead2)/exp(windtail2)
exp(windtail2)/exp(windhead2)
exp(windtail)/exp(windhead)
fit1 <- glm(use ~ wind - 1, data = shuttle, family = "binomial")
summary(fit)
windhead <- fit1$coef[1]
windtail <- fit1$coef[2]
exp(windtail)/exp(windhead)
data(InsectSprays)
head(InsectSprays)
fit <- train(spray ~., method = "poisson", data = InsectSprays)
library(caret)
fit <- train(spray ~., method = "poisson", data = InsectSprays)
fit <- glm(count ~ spray  - 1, family = "poisson", data = InsectSprays)
fit
exp(fit$coef[1])/exp(fit$coef[2])
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
x <- c(1:10, 13:22)
y <- numeric(20)
## Create first segment
y[1:10] <- 20:11 + rnorm(10, 0, 1.5)
## Create second segment
y[11:20] <- seq(11, 15, len=10) + rnorm(10, 0, 1.5)
## Plot it
par(mar=c(4,4,1,1)+0.2)
plot(x,y, ylim=c(5, 20), pch=16)
y
breaks <- x[which(x >= 9 & x <= 17)]
breaks
x
mse <- numeric(length(breaks))
for(i in 1:length(breaks)){
piecewise1 <- lm(y ~ x*(x < breaks[i]) + x*(x>=breaks[i]))
mse[i] <- summary(piecewise1)[6]
}
mse <- as.numeric(mse)
plot(mse)
mse
breaks
breaks[which(mse==min(mse))]
piecewise2 <- lm(y ~ x*(x < 15) + x*(x > 15))
summary(piecewise2)
plot(x,y, ylim=c(5, 20), pch=16)
curve((3.3133 + 16.6352) + (0.5843-1.3025)*x, add=T, from=1, to=15)
curve((3.3133 - 0.9116) + 0.5843*x, add=T, from=15, to=max(x))
abline(v=15, lty=3)
lin.mod <- lm(y~x)
segmented.mod <- segmented(lin.mod, seg.Z = ~x, psi=14)
library(segmented)
install.packages("segmented")
library(segmented)
segmented.mod <- segmented(lin.mod, seg.Z = ~x, psi=14)
segmented.mod
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
lin.mod <- lm(y ~ x)
lin.mod
plot(x, y)
segmented.mod
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
lin.mod <- lm(y ~ x)
segmented.mod <- segmented(lin.mod, seg.Z = ~x, psi=14)
segmented.mod <- segmented(lin.mod, seg.Z = ~x, psi=0)
segmented.mod
plit(x, y)
plot(x, y)
lin.mod
abline(lin.mod)
abline(segmented.mod, color = "red")
summary(segmented.mode)
summary(segmented.mod)
?abline
abline(-0.556, 2.09057)
plot(x, y)
plot(segmented.mod)
plot(x, y)
plot(segmented.mod, add = TRUE)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
lhs <- function(x) ifelse(x < 0,0-x,0) # basis function 1 (lhs = left hockey stick)
rhs <- function(x) ifelse(x > 0,x-0,0) # basis function 2 (rhs = right hockey stick)
gb <- lm(y ~ lhs(x) + rhs(x))
x <- seq(-5,5,by=1)
py <- gb$coef[1]+gb$coef[2]*lhs(x)+gb$coef[3]*rhs(x)
plot(x,py)
plot(x)
plot(x, py)
lhs
gb
?ifelse
py
plot(x, y)
plot(x, y, add = TRUE)
y - py
py
warnings()
x - py
y - py
plot(gb, add=TRUE)
py
plot(lm(py ~ x), add = TRUE)
plot(x, y)
plot(lm(py ~ x), add = TRUE)
plot(x, y)
abline(lm(py ~ x), add = TRUE)
abline(py)
abline(py)
exp(windhead)/exp(windtail)
library(MASS)
data(shuttle)
# convert outcome to 0 = noauto, 1 = auto
shuttle$use <- factor(shuttle$use, levels = c("auto", "noauto"), labels = c(1, 0))
fit1 <- glm(use ~ wind - 1, data = shuttle, family = "binomial")
summary(fit)
windhead <- fit1$coef[1]
windtail <- fit1$coef[2]
exp(windhead)/exp(windtail)
exp(windtail)/exp(windhead)
plot(x, y)
lines(x, py)
gc()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
xyplot(weight ~ Time | Diet, panel = function(weight, Time, ...){})
xyplot(weight ~ Time | Diet, panel = function(weight, Time, ...){
panel.xyplot(weight, Time, ...)
panel.abline(h = median(Time), lty = 2)
})
xyplot(weight ~ Time | Diet)
library(nlme)
xyplot(weight ~ Time | Diet, panel = function(weight, Time, ...){
panel.xyplot(weight, Time, ...)
panel.abline(h = median(Time), lty = 2)
})
library(lattice)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
xyplot(weight ~ Time | Diet, panel = function(weight, Time, ...){
panel.xyplot(weight, Time, ...)
panel.abline(h = median(Time), lty = 2)
})
xyplot(weight ~ Time | Diet, panel = function(x, y, ...){
panel.xyplot(x, y, ...)
panel.abline(h = median(y), lty = 2)
})
?llines
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
?trellis.par.set()
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + stats_smooth("loess")
?lpoints?
?lpoints
source("http://www.openintro.org/stat/data/present.R")
head(present)
dim(present)
63 * 3
View(present)
present$boys
plot(x = present$year, y = present$girls)
plot(x = present$year, y = present$girls, type = "l")
plot(present$year, present$boys + present$girls, type = "l")
max( present$boys + present$girls)
sort( present$boys + present$girls)
DF <- data.frame(present$Year,  present$boys + present$girls)
dim(present$year)
present$year
present$Year
DF <- data.frame(present$year,  present$boys + present$girls)
DF
sort(DF)
sort(DF,  present$boys + present$girls)
names(DF) <- c("Year", "Births")
sort(DF, Births)
sort(DF, DF$Births)
?sort
?sorted
a <- DF[with(DF, order(Birth))]
a <- DF[with(DF, order(Births))]
a
names(DF)
?order
?order
DF[order(DF)]
sort(DF)
DF[order(-Birth)]
DF[order(-DF$Birth)]
DF[order(-DF$Birth, DF$Year)]
DF[order(Birth, Year)]
DF[order(Births, Year)]
names(DF)
sort(DF, by = ~ -Birth)
DF
sort(DF, by = ~ -Birth)
library(dplyr)
install.packages(dplyr)
install.packages("dplyr")
dd <- data.frame(b = factor(c("Hi", "Med", "Hi", "Low"),
levels = c("Low", "Med", "Hi"), ordered = TRUE),
x = c("A", "D", "A", "C"), y = c(8, 3, 9, 9),
z = c(1, 1, 1, 2))
z
head(dd)
R> dd[with(dd, order(-z, b)), ]
dd[with(dd, order(-z, b)), ]
z
b
DF[with(DF, order(-Births, Year)), ]
DF[[1]]
DF[1, ]
DF <- DF[with(DF, order(-Births, Year)), ]
DF[1, ]
present$boys/present$girls
present$boys/(present$boys + present$girls)
plot(present$year, present$boys, type = "l")
, type = "l")
plot(present$year, present$boys/(present$boys + present$girls)
, type = "l")
present$boys/(present$boys + present$girls)
present$boys > present$girls
plot(present$year, present$boys/present$girls), type = "l")
plot(present$year, present$boys/present$girls, type = "l")
present$boys-present$girls
DF1 <- data.frame(present$year, diff <- present$boys-present$girls)
DF1
DF1 <- data.frame(present$year,  present$boys-present$girls)
DF1 <- data.frame(present$year,  present$boys-present$girls)
names(DF) <- c("Year", "Difference")
head(DF1)
names(DF) <- c("Year", "Births")
names(DF1) <- c("Year", "Difference")
head(DF1)
DF1 <- DF1[with(DF1, order(-Difference)), ]
DF1
setwd("~/GitHub/Data-Analysis-and-Statistical-Inference-")
source("http://www.openintro.org/stat/data/cdc.R")
names(cdc)
head(cdc)
197.34 + 9(132.59)
197.34 + 9*(132.59)
234.65 + 9 * (157.66)
202.67 + 9 *136.17
dim(cdc)
head(cdc)
tail(cdc)
summary(cdc$weight)
summary(cdc$weight)$Median
mean(cdc$weight)
var(cdc$weight)
median(cdc$weight)
table(cdc$smoke100)
table(cdc$smoke100)/20000
barplot(table(cdc$smoke100))
barplot(cdc$smoke100)
(cdc$smoke100
)
smoke = table(cdc$smoke100)
barplot(smoke)
table(cdc$gender)
names(cdc)
class(cdc$genhlth)
head(cdc$genhlth)
head(cdc$smoke100)
gender_smokers = table(cdc$gender, cdc$smoke100)
mosaicplot(gender_smokers)
gender_smokers
summary(cdc$genhlth)
4657/length(cdc$genhlth)
dim(cdc)
cdc[567, 6]
cdc[1:10, 6]
cdc$gender == "m"
mdata = subset(cdc, cdc$gender == "m
")"
mdata = subset(cdc, cdc$gender == "m")
head(mdata)
m_and_over30 = subset(cdc, cdc$gender == "m" & cdc$age > 30)
under23 and smoke <- subset(cdc, cdc$age < 23)
under23.and.smoke <- subset(cdc, cdc$age < 23)
dim(under23.and.smoke)
under23.and.smoke <- subset(cdc, cdc$age < 23 & cdc$smoke100 == 1)
dim(under23.and.smoke)
boxplot(cdc$height)
summary(cdc$height)
boxplot(cdc$height ~
cdc$gender)
bmi = (cdc$weight/cdc$height^2) * 703
boxplot(bmi ~ cdc$genhlth)
head(bmi)
boxplot(bmi)
boxplot(bmi ~ cdc$genhlth)
hist(cdc$age)
hist(bmi)
hist(bmi, breaks = 50)
source("http://www.openintro.org/stat/data/present.R")
dim(present)
present$boys
plot(x = present$year, y = present$girls)
plot(x = present$year, y = present$girls, type = "l")
plot(present$year, present$boys + present$girls, type = "l")
max( present$boys + present$girls)
sort( present$boys + present$girls)
DF <- data.frame(present$year,  present$boys + present$girls)
names(DF) <- c("Year", "Births")
DF <- DF[with(DF, order(-Births, Year)), ]
plot(present$year, present$boys/(present$boys + present$girls)
, type = "l")
plot(present$year, present$boys/present$girls, type = "l")
DF1 <- data.frame(present$year,  present$boys-present$girls)
names(DF1) <- c("Year", "Difference")
b <- DF1[]
DF1 <- DF1[with(DF1, order(-Difference)), ]
DF1
names(cdc)
plot(cdc$wtdesire, cdc$weight, type = "l")
plot(cdc$wtdesire, cdc$weight)
plot(cdc$weight,cdc$wtdesire)
abline(lm(cdc$wtdesire ~ cdc$weight), color = "red")
abline(lm(cdc$wtdesire ~ cdc$weight), col= "red")
abline(lm(cdc$wtdesire ~ cdc$weight))
abline(lm(cdc$wtdesire ~ cdc$weight), col= "red")
cdc$smoke100
plot(cdc$wtdesire, cdc$weight)
abline(lm(cdc$weight ~ cdc$wtdesire), col= "red")
